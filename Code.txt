#Below is a code that translates a word into pyglatin

pyg = 'ay'

original = raw_input('Enter a word:')

if len(original) > 0 and original.isalpha():
  print original
  word = original.lower()
  first = word[0]
  new_word = word + first + pyg
  new_word = new_word[1:len(new_word)]
  print new_word
else:
  print 'empty'

________________________________________________________________________
#Below is a code that examines students' grades.


students = [lloyd, alice, tyler]

lloyd = {
  "name": "Lloyd",
  "homework": [90.0, 97.0, 75.0, 92.0],
  "quizzes": [88.0, 40.0, 94.0],
  "tests": [75.0, 90.0]
}
alice = {
  "name": "Alice",
  "homework": [100.0, 92.0, 98.0, 100.0],
  "quizzes": [82.0, 83.0, 91.0],
  "tests": [89.0, 97.0]
}
tyler = {
  "name": "Tyler",
  "homework": [0.0, 87.0, 75.0, 22.0],
  "quizzes": [0.0, 75.0, 78.0],
  "tests": [100.0, 100.0]
}
def average(numbers):
  total = sum(numbers)
  total = float(total)
  return total / len(numbers)

def get_average(student):
  homework = 0.1 * average(student["homework"])
  quizzes = 0.3 * average(student["quizzes"])
  tests = 0.6 * average(student["tests"])
  return homework + quizzes + tests

def get_letter_grade(score):
  if score >= 90:
    return "A"
  elif score >= 80:
    return "B"
  elif score >= 70:
    return "C"
  elif score >= 60:
    return "D"
  else:
    return "F"

def get_class_average(class_list):
  results = []
  for student in class_list:
    results.append(get_average(student))
  return average(results)

print get_class_average(students)
print get_letter_grade(get_class_average(students))

________________________________________________________________________
#Below is a code that runs a game of Battleship

from random import randint

board = []

for x in range(0, 5):
  board.append(["O"] * 5)

def print_board(board):
  for row in board:
    print " ".join(row)

print_board(board)

def random_row(board):
  return randint(0, len(board) - 1)

def random_col(board):
  return randint(0, len(board[0]) - 1)

ship_row = random_row(board)
ship_col = random_col(board)
print ship_row
print ship_col

for turn in range(4):
  print "Turn", turn + 1
  guess_row = int(raw_input("Guess Row: "))
  guess_col = int(raw_input("Guess Col: "))

  if guess_row == ship_row and guess_col == ship_col:
    print "Congratulations! You sank my battleship!"
    break
  else:
    if guess_row not in range(5) or \
      guess_col not in range(5):
      print "Oops, that's not even in the ocean."
    elif board[guess_row][guess_col] == "X":
      print( "You guessed that one already." )
    else:
      print "You missed my battleship!"
      board[guess_row][guess_col] = "X"
      if turn == 3:
        print "Game Over"
    print_board(board)

________________________________________________________________________
#Number guessing game

from random import randint

random_number = randint(1, 10)

guesses_left = 3

while guesses_left > 0:
  guess = int(raw_input("What is your guess?: ")
  if guess == random_number:
    print "You win!"
    break
  guesses_left -= 1
else:
  print "Your lose."

________________________________________________________________________
#Returns the factorial of a number

def factorial(x):
  factors = []
  result = 1
  while x > 0:
    factors.append(x)
    x -= 1
  for number in factors:
  	result = result * number
  return result

________________________________________________________________________
#Returns the reverse of your input

def reverse(text):
  word = ""
  l = len(text) - 1
  while l >= 0:
    word = word + word[l]
    l = l - 1
  return word

________________________________________________________________________
#Remove all vowels from a string

def anti_vowel(text):
  phrase = ""
  for letter in text:
    for vowel in "aeiouAEIOU":
      if letter == vowel:
        letter = ""
      else:
        letter = letter
    phrase = phrase + letter
  return phrase
________________________________________________________________________
#scrabble game

score = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 
         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 
         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 
         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 
         "x": 8, "z": 10}

def scrabble_score(word):
  word = word.lower()
  word_score = 0
  for letter in word:
    for entry in score:
      if letter == entry:
        word_score += score[entry]
      else:
        continue
  return word_score
________________________________________________________________________
#censor a sentence

def censor(text, word):
    words = text.split()
    result = ''
    stars = '*' * len(word)
    count = 0
    for i in words:
        if i == word:
            words[count] = stars
        count += 1
    result =' '.join(words)

    return result
________________________________________________________________________
#count the number of a chosen item in a list

def count(sequence, item):
  total = 0
  for thing in sequence:
    if thing == item:
      total += 1
  return total
________________________________________________________________________
#take the duplicates out of a list

def remove_duplicates(inputlist):
    if inputlist == []:
        return [] 
    inputlist = sorted(inputlist)
    outputlist = [inputlist[0]]
    for i in inputlist:
        if i > outputlist[-1]:
            outputlist.append(i) 
    return outputlist

-------------- or -----------------

def remove_duplicates(inputlist):
  if inputlist == []:
    return []
  outputlist = []
  for number in inputlist:
    if number in outputlist:
      continue
    else:
      outputlist.append(number)
  return outputlist
________________________________________________________________________
#find median of a list

def median(lst):
  sorted_list = sorted(lst)
  if len(sorted_list) % 2 != 0:
  	index = len(newlist) // 2
	return sorted_list[index]
  elif len(sorted_list) % 2 == 0
	index_1 = len(sorted_list) / 2 - 1
	index_2 = len(sorted_list) / 2
	mean = (sorted_list[index_1] + sorted_list[index_2]) / 2.0
	return mean
________________________________________________________________________
#Exam statistics

grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

def print_grades(grades_input):
  for grade in grades_input:
    print grade

def grades_sum(scores):
  total = 0
  for score in scores: 
    total += score
  return total
    
def grades_average(grades_input):
  sum_of_grades = grades_sum(grades_input)
  average = sum_of_grades / float(len(grades_input))
  return average

def grades_variance(grades):
    variance = 0
    for number in grades:
        variance += (grades_average(grades) - number) ** 2
    return variance / len(grades)

def grades_std_deviation(variance):
  return variance ** 0.5

variance = grades_variance(grades)

for grade in grades:
  print grade
print grades_sum(grades)
print grades_average(grades)
print grades_variance(grades)
print grades_std_deviation(variance)
________________________________________________________________________
#Bitwise operators
#Important numbers

2 ** 0 = 1
2 ** 1 = 2
2 ** 2 = 4
2 ** 3 = 8
2 ** 4 = 16
2 ** 5 = 32
2 ** 6 = 64
2 ** 7 = 128
2 ** 8 = 256
2 ** 9 = 512
2 ** 10 = 1024

...32|16|8|4|2|1
________________________________________________________________________
#Bitwise XOR ^ as a function

a = "1110"
b = "101"
result = "0b"

if len(a) > len(b):
    b = "0" + b
elif len(b) < len(b):
    a = "0" + a

for i in range(max(len(a),len(b))):
    if a[i] == b[i]:
        result += "0"
    elif a[i] == "1" or b[i] == "1":
        result += "1"

print result
________________________________________________________________________
#Class stuff

class Employee(object):
  """Models real-life employees!"""
  def __init__(self, employee_name):
    self.employee_name = employee_name

  def calculate_wage(self, hours):
    self.hours = hours
    return hours * 20.00

# Add your code below!
class PartTimeEmployee(Employee):
  def calculate_wage(self, hours):
    self.hours = hours
    return hours * 12.00

  def full_time_wage(self, hours):
    return super(PartTimeEmployee, self).calculate_wage(hours)
  
milton = PartTimeEmployee("milton")
print milton.full_time_wage(10)

~~~~~~~~~~~~~~~~~~~~~~~~~~~
#call a variable

my_car.condition     -where- my_car is your object

#call a function from your class

my_car.drive_car()   -where- drive_car is the function




